#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)
    #chamada do tratamento do caso 2
    dados = data_treatment(conexao, dados)
    comando = dados.split(b' ', 1)[0] # recebe a primeira palavra da conexao
    
    if comando == b'PING':
        itsPing(conexao, dados)

        
    print(conexao, dados)
    
# TRATAMENTO DO CASO 1
def itsPing (conexao, dados):
    
    resposta= b':server PONG server :'
    resposta+= dados.split(b' ', 1)[1] # resposta recebe resposta padrão + payload
    conexao.enviar(resposta)

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)
    
    conexao.dados_residuais = b' '

# TRATAMENTO DO CASO 2
def data_treatment(conexao, dados):


	if b'\n' in dados:
		dados = dados.split(b"\n", 1)
		conexao.dados_residuais = dados[1]
		return dados[0] + b'\n'
	elif b'\n' in dados and conexao.dados_residuais != b'':
		dados = conexao.dados_residuais + dados
		conexao.dados_residuais = b''
		return dados
	elif b'\n' not in dados and conexao.dados_residuais != b'':
		conexao.dados_residuais = conexao.dados_residuais + dados
		return b''
# FIM DO CASO 2	

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
