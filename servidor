#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
	if dados == b'':
		return sair(conexao)
	#chamada do tratamento do caso 2
	dados = data_treatment(conexao, dados)
	# recebe todos os elementos de dados menos o ultimo (vazio)
	dados = dados[:-1]
	for dado in dados:
		comando = dado.split(b' ', 1)[0] # recebe a primeira palavra da conexao

		if comando == b'PING':
			itsPing(conexao, dado)


	print(conexao, dados)

# TRATAMENTO DO CASO 1
def itsPing (conexao, dados):
    
    resposta= b':server PONG server :'
    resposta+= dados.split(b' ', 1)[1] # resposta recebe resposta padrão + payload
    conexao.enviar(resposta)

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)
    
    conexao.dados_residuais = b''

# TRATAMENTO DO CASO 2
def data_treatment(conexao, dados):
	"""
	Funcao para o tratamento de entradas, podendo receber entradas como:
	* 'lin', depois 'h' e depois 'a\r\n'
	e as transforma em 'linha\r\n'
	
	normalmente, para a finalização dos dados, entende-se de que o ultimo elemento da lista 
	dados seja o b'' para sair dessa funçao
	"""
	
	if conexao.dados_residuais != b'':
		dados = conexao.dados_residuais + dados
		conexao.dados_residuais = b''
	
	if b'\n' in dados:
		dados = dados.split(b'\n')
		for i in range(len(dados) - 1):
				dados[i] = dados[i] + b'\n'
		if dados[-1] != '\n':
			conexao.dados_residuais = dados[-1]
			dados[-1] = b''
	else:
		conexao.dados_residuais = conexao.dados_residuais + dados
	return dados
		
# FIM DO CASO 2	
# TRATAMENTO CASO 3 E 4                 
def itsNick (conexao, dados):
    apelido = dados.split(b' ', 1)[1] # extraindo o apelido após o comando
    apelido = apelido.split(b'\n\r')[0] # removendo os caracteres de quebra de linha
    novo_apelido = b'*
    apelido = apelido.lower()
    
                 
                
    # apelido ja existe
    if apelido in Nicks:
        resposta = b':server 433 ' + conexao.apelido + b' ' + apelido + b' :Nickname is already in use' + b'\n\r'

    
    # validando apelido 
    if validar_nome(apelido):
        # primeiro apelido
        if conexao_apelido == novo_apelido:
            Nicks[apelido] = conexao  # coloca no dicionário a chave apelido com conexao de conteudo
            conexao.apelido = apelido
            conexao.enviar(b':server 422 ' + apelido + b' :MOTD File is missing' + b'\n\r'
        # trocar apelido
        else:
            Nicks[apelido] = Nicks.pop(apelido)
            
                          
   # apelido invalido          
    else: 
        conexao.enviar(b':server 432 ' + b'* ' + apelido + b' :Erroneous nickname' + b'\n\r')
    
servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()

